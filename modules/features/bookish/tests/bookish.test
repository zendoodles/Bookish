<?php
/**
  * @file 
  * This is a file used to test the Bookish module
*/
require_once drupal_get_path('module', 'bookish_test') . '/bookish_web_test_case.php';

class BookishTest extends BookishWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Bookish',
      'description' => 'Tests for core Bookish functionality.',
      'group' => 'Bookish',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp();
    $this->bookishBasic();
  }

/**
   * Test comment toggling.
   */
  function testCommentToggle() {
    $this->drupalLogin($this->bookishUsers['user']);
    $node = $this->bookishCreateGroupContent($this->bookishGroups['public'], 'blog');

    // Test that the comment form exists and the node owner can toggle
    // form commenting on and off.
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertField('comment', t('Comment form found.'));
    $this->assertField('edit-comment-toggle', t('Comment toggler form found.'));

    // Admin should have access as well.
    $this->drupalLogin($this->bookishUsers['administrator']);
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertField('edit-comment-toggle', t('Comment toggler form found.'));

    // Manager (and other users) do not have access.
    $this->drupalLogin($this->bookishUsers['manager']);
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertNoField('edit-comment-toggle', t('Comment toggler form not found.'));

    // Turn off commenting.
    $this->drupalLogin($this->bookishUsers['user']);
    $this->drupalPost("{$this->bookishGroups['public']->path}/node/{$node->nid}", array(), t('Close comment thread'));

    // Test that comments are actually off.
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertNoField('comment', t('Comment form not found.'));
    $this->assertField('edit-comment-toggle', t('Comment toggler form found.'));
    $this->drupalPost("{$this->bookishGroups['public']->path}/node/{$node->nid}", array(), t('Reopen comment thread'));

    // Admin should be able to turn them back on.
    $this->drupalLogin($this->bookishUsers['administrator']);
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertField('edit-comment-toggle', t('Comment toggler form found.'));

    // Manager should not.
    $this->drupalLogin($this->bookishUsers['manager']);
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$node->nid}");
    $this->assertNoField('edit-comment-toggle', t('Comment toggler form not found.'));

    // Create a non-comment enabled content type. Make sure toggler form
    // does not appear.
    $this->drupalLogin($this->bookishUsers['user']);
    $book = $this->bookishCreateGroupContent($this->bookishGroups['public'], 'book');
    $this->drupalGet("{$this->bookishGroups['public']->path}/node/{$book->nid}");
    $this->assertNoField('edit-comment-toggle', t('Comment toggler form not found.'));
  }

  /**
   * Ensure that 403 pages display a login form for anonymous users.
   */
  function test403() {
    $this->drupalLogout();
    $this->drupalGet("node/{$this->bookishGroups['private']->nid}");
    $this->assertText(t('Username'));
    $this->assertText(t('Password'));

    $user = $this->bookishCreateUser('authenticated user');
    $this->drupalLogin($user);
    $this->drupalGet("node/{$this->bookishGroups['private']->nid}");
    $this->assertResponse(403, t('Access denied'));
  }

  /**
   * Test archiving.
   */
  function testArchive() {
    $this->drupalLogin($this->bookishCreateUser('administrator'));
    $group = $this->bookishCreateGroup();
    $post = $this->bookishCreateGroupContent($group, 'blog');

    // Archive the group.
    $this->drupalPost("node/{$group->nid}/archive", array(), t('Archive'));

    // Check that there is a message on both group & blog nodes.
    $this->drupalGet("node/{$group->nid}");
    $message = t('This !type is <strong>archived</strong>. You may not add or alter any of its content.', array('!type' => node_type_get_name($group->type)));
    $this->assertRaw($message);
    $this->drupalGet("node/{$post->nid}");
    $message = t('This !type is <strong>archived</strong>. You may not add or alter any of its content.', array('!type' => node_type_get_name($group->type)));
    $this->assertRaw($message);

    // Check that blog node editing is disabled.
    $this->drupalGet("node/{$post->nid}/edit");
    $this->assertResponse(403, t('Access denied'));

    // Reactivate it.
    $this->drupalPost("node/{$group->nid}/reactivate", array(), t('Reactivate'));
    $message = t('The @type @title has been reactivated.', array('@type' => node_type_get_name($group->type), '@title' => $group->title));
    $this->assertRaw($message);

    // Check that blog node editing works.
    $this->drupalGet("node/{$post->nid}/edit");
    $this->assertResponse(200, t('Accessible'));
  }
}
